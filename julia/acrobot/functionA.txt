#include <math.h>
void tiny_GetJacobianA(sfloat* A, const sfloat* x, const sfloat* u) {
  A[0] = 1;
  A[1] = 0;
  A[2] = 0;
  A[3] = 0;
  A[4] = 0;
  A[5] = 0;
  A[6] = 1;
  A[7] = 0;
  A[8] = 0;
  A[9] = 0;
  A[10] = 0.16666666666666666 * (-0.2 * (0.05 * u[0] + x[3]) * sin(0.05 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + -0.2 * (0.05 * u[0] + x[3]) * sin(0.05 * tan(x[4]) * x[3] + x[2]) + -0.1 * (0.1 * u[0] + x[3]) * sin(0.1 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + -0.1 * sin(x[2]) * x[3]);
  A[11] = 0.16666666666666666 * (0.1 * (0.1 * u[0] + x[3]) * cos(0.1 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + 0.1 * cos(x[2]) * x[3] + 0.2 * (0.05 * u[0] + x[3]) * cos(0.05 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + 0.2 * (0.05 * u[0] + x[3]) * cos(0.05 * tan(x[4]) * x[3] + x[2]));
  A[12] = 1;
  A[13] = 0;
  A[14] = 0;
  A[15] = 0.16666666666666666 * (0.2 * cos(0.05 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + 0.2 * cos(0.05 * tan(x[4]) * x[3] + x[2]) + 0.1 * cos(0.1 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + 0.1 * cos(x[2]) + -0.010000000000000002 * (0.05 * u[0] + x[3]) * sin(0.05 * tan(x[4]) * x[3] + x[2]) * tan(x[4]) + -0.010000000000000002 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) * sin(0.05 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + -0.010000000000000002 * (0.1 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) * sin(0.1 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]));
  A[16] = 0.16666666666666666 * (0.2 * sin(0.05 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + 0.2 * sin(0.05 * tan(x[4]) * x[3] + x[2]) + 0.1 * sin(0.1 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + 0.1 * sin(x[2]) + 0.010000000000000002 * (0.1 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) * cos(0.1 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + 0.010000000000000002 * (0.05 * u[0] + x[3]) * cos(0.05 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) * tan(0.05 * u[1] + x[4]) + 0.010000000000000002 * (0.05 * u[0] + x[3]) * cos(0.05 * tan(x[4]) * x[3] + x[2]) * tan(x[4]));
  A[17] = 0.16666666666666666 * (0.4 * tan(0.05 * u[1] + x[4]) + 0.1 * tan(0.1 * u[1] + x[4]) + 0.1 * tan(x[4]));
  A[18] = 1;
  A[19] = 0;
  A[20] = 0.16666666666666666 * (-0.010000000000000002 * pow(0.05 * u[0] + x[3], 2) * (1 + pow(tan(0.05 * u[1] + x[4]), 2)) * sin(0.05 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + -0.010000000000000002 * (1 + pow(tan(0.05 * u[1] + x[4]), 2)) * (0.05 * u[0] + x[3]) * (0.1 * u[0] + x[3]) * sin(0.1 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + -0.010000000000000002 * (1 + pow(tan(x[4]), 2)) * (0.05 * u[0] + x[3]) * sin(0.05 * tan(x[4]) * x[3] + x[2]) * x[3]);
  A[21] = 0.16666666666666666 * (0.010000000000000002 * pow(0.05 * u[0] + x[3], 2) * (1 + pow(tan(0.05 * u[1] + x[4]), 2)) * cos(0.05 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + 0.010000000000000002 * (1 + pow(tan(0.05 * u[1] + x[4]), 2)) * (0.05 * u[0] + x[3]) * (0.1 * u[0] + x[3]) * cos(0.1 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + 0.010000000000000002 * (1 + pow(tan(x[4]), 2)) * (0.05 * u[0] + x[3]) * cos(0.05 * tan(x[4]) * x[3] + x[2]) * x[3]);
  A[22] = 0.16666666666666666 * (0.1 * (1 + pow(tan(0.1 * u[1] + x[4]), 2)) * (0.1 * u[0] + x[3]) + 0.4 * (1 + pow(tan(0.05 * u[1] + x[4]), 2)) * (0.05 * u[0] + x[3]) + 0.1 * (1 + pow(tan(x[4]), 2)) * x[3]);
  A[23] = 0;
  A[24] = 1;
}

