#include <math.h>
void tiny_Bicycle3dGetJacobianB_Raw(double* B, const double* x, const double* u) {
  B[0] = 0.16666666666666666 * (0.4 * cos(0.05 * tan(u[1]) * u[0] + x[2]) + 0.1 * cos(0.1 * tan(u[1]) * u[0] + x[2]) + 0.1 * cos(x[2]) + -0.010000000000000002 * sin(0.1 * tan(u[1]) * u[0] + x[2]) * tan(u[1]) * u[0] + -0.020000000000000004 * sin(0.05 * tan(u[1]) * u[0] + x[2]) * tan(u[1]) * u[0]);
  B[1] = 0.16666666666666666 * (0.4 * sin(0.05 * tan(u[1]) * u[0] + x[2]) + 0.1 * sin(0.1 * tan(u[1]) * u[0] + x[2]) + 0.1 * sin(x[2]) + 0.020000000000000004 * cos(0.05 * tan(u[1]) * u[0] + x[2]) * tan(u[1]) * u[0] + 0.010000000000000002 * cos(0.1 * tan(u[1]) * u[0] + x[2]) * tan(u[1]) * u[0]);
  B[2] = 0.09999999999999999 * tan(u[1]);
  B[3] = 0.16666666666666666 * (-0.010000000000000002 * (1 + pow(tan(u[1]), 2)) * pow(u[0], 2) * sin(0.1 * tan(u[1]) * u[0] + x[2]) + -0.020000000000000004 * (1 + pow(tan(u[1]), 2)) * pow(u[0], 2) * sin(0.05 * tan(u[1]) * u[0] + x[2]));
  B[4] = 0.16666666666666666 * (0.010000000000000002 * (1 + pow(tan(u[1]), 2)) * pow(u[0], 2) * cos(0.1 * tan(u[1]) * u[0] + x[2]) + 0.020000000000000004 * (1 + pow(tan(u[1]), 2)) * pow(u[0], 2) * cos(0.05 * tan(u[1]) * u[0] + x[2]));
  B[5] = 0.09999999999999999 * (1 + pow(tan(u[1]), 2)) * u[0];
}

