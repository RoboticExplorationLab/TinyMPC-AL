#include <math.h>
void tiny_GetJacobianB(sfloat* B, const sfloat* x, const sfloat* u) {
  B[0] = 0.16666666666666666 * (0.010000000000000002 * cos(0.05 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + 0.010000000000000002 * cos(0.05 * tan(x[4]) * x[3] + x[2]) + 0.010000000000000002 * cos(0.1 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + -0.0005000000000000001 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) * sin(0.05 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + -0.0005000000000000001 * (0.1 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) * sin(0.1 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]));
  B[1] = 0.16666666666666666 * (0.010000000000000002 * sin(0.05 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + 0.010000000000000002 * sin(0.05 * tan(x[4]) * x[3] + x[2]) + 0.010000000000000002 * sin(0.1 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + 0.0005000000000000001 * (0.1 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) * cos(0.1 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + 0.0005000000000000001 * (0.05 * u[0] + x[3]) * cos(0.05 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) * tan(0.05 * u[1] + x[4]));
  B[2] = 0.16666666666666666 * (0.020000000000000004 * tan(0.05 * u[1] + x[4]) + 0.010000000000000002 * tan(0.1 * u[1] + x[4]));
  B[3] = 0.09999999999999999;
  B[4] = 0;
  B[5] = 0.16666666666666666 * (-0.0005000000000000001 * pow(0.05 * u[0] + x[3], 2) * (1 + pow(tan(0.05 * u[1] + x[4]), 2)) * sin(0.05 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + -0.0005000000000000001 * (1 + pow(tan(0.05 * u[1] + x[4]), 2)) * (0.05 * u[0] + x[3]) * (0.1 * u[0] + x[3]) * sin(0.1 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]));
  B[6] = 0.16666666666666666 * (0.0005000000000000001 * pow(0.05 * u[0] + x[3], 2) * (1 + pow(tan(0.05 * u[1] + x[4]), 2)) * cos(0.05 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]) + 0.0005000000000000001 * (1 + pow(tan(0.05 * u[1] + x[4]), 2)) * (0.05 * u[0] + x[3]) * (0.1 * u[0] + x[3]) * cos(0.1 * (0.05 * u[0] + x[3]) * tan(0.05 * u[1] + x[4]) + x[2]));
  B[7] = 0.16666666666666666 * (0.010000000000000002 * (1 + pow(tan(0.1 * u[1] + x[4]), 2)) * (0.1 * u[0] + x[3]) + 0.020000000000000004 * (1 + pow(tan(0.05 * u[1] + x[4]), 2)) * (0.05 * u[0] + x[3]));
  B[8] = 0;
  B[9] = 0.09999999999999999;
}

